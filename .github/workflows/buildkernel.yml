name: "Build Kernel"

env:
  OUT_DIR: "${{ github.workspace }}/out"

on:
  workflow_dispatch:

jobs:
  Set-repos:
    name: "Parse repos.json"
    runs-on: macos-latest
    outputs:
      repos: ${{ steps.generate-matrix.outputs.repos }}
      builddate: ${{ steps.generate-builddate.outputs.builddate }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v3

      - name: "Generate Matrix"
        id: generate-matrix
        run: |
          echo "repos<<EOF" >> $GITHUB_OUTPUT
          jq -s '[.[][]]' repos/repos*.json >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: "Set builddate"
        id: generate-builddate
        run: echo "builddate=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

  Build-Kernel:
    name: "🐎 Build kernel"
    runs-on: macos-latest
    needs:
      - Set-repos
    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        repos: ${{ fromJSON(needs.Set-repos.outputs.repos) }}
    env:
      WORKSPACE: ${{ github.workspace }}
      builddate: "${{ needs.Set-repos.outputs.builddate }}"
      KERNEL_NAME: ${{ matrix.repos.kernelSource.name }}
      KERNEL_REPO: ${{ matrix.repos.kernelSource.repo }}
      KERNEL_BRANCH: ${{ matrix.repos.kernelSource.branch }}
      KERNEL_DEVICE: ${{ matrix.repos.kernelSource.device }}
      DEFCONFIG_NAME: ${{ matrix.repos.kernelSource.defconfig }}
      withKernelSU: ${{ matrix.repos.withKernelSU }}
      useAnykernel: ${{ matrix.repos.AnyKernel3.use }}
      release: ${{ matrix.repos.AnyKernel3.release }}

    steps:
      - name: "Install prerequisites"
        run: |
          brew install make coreutils python3 gnu-sed
          echo "/usr/local/opt/make/libexec/gnubin" >> $GITHUB_PATH
          echo "/usr/local/opt/gnu-sed/libexec/gnubin" >> $GITHUB_PATH

      - name: "Setup Anykernel3"
        env:
          params: "${{ toJSON(matrix.repos.AnyKernel3) }}"
        run: |
          ANYKERNEL_REPO=$(echo $params | jq -r ".repo")
          ANYKERNEL_BRANCH=$(echo $params | jq -r ".branch")
          git clone --recursive --depth=1 -j $(nproc) --branch $ANYKERNEL_BRANCH $ANYKERNEL_REPO AnyKernel3
          echo "Setup Anykernel3 => ($ANYKERNEL_REPO)"

      - name: "Clone kernel source => (${{ env.KERNEL_REPO }})"
        run: |
          git clone --recursive --depth=1 -j $(nproc) --branch $KERNEL_BRANCH $KERNEL_REPO $KERNEL_NAME
          echo "Clone kernel source => ($KERNEL_REPO)"

      - name: "Set args"
        id: generate-args
        env:
          makeOptions: "${{ toJSON(matrix.repos.makeOptions) }}"
          makeExports: "${{ toJSON(matrix.repos.makeExports) }}"
          THREAD: $(nproc --all)
        run: |
          echo "PATH Variable: $PATH"
          args="-j${{ env.THREAD }}"
          jq -r 'to_entries | map(.key + "|" + (.value | tostring)) | .[]' <<< "$makeOptions" | while IFS='|' read key value; do
            export args="$args ${key}=${value}"
            if [ $key = "ARCH" ]; then
              echo "ARCH=$ARCH" >> $GITHUB_OUTPUT
            fi
          done < < (env -0)
          echo "==> $args"
          if [ -n "${{ env.OUT_DIR }}" ]; then
            mkdir -p ${{ env.OUT_DIR }} && args="$args O=${{ env.OUT_DIR }}"
          fi
        
          echo "$args"
          echo "args=$args" >> $GITHUB_OUTPUT
