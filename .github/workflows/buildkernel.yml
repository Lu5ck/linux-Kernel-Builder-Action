name: "Build Kernel"

env:
  OUT_DIR: "${{ github.workspace }}/out"

on:
  workflow_dispatch:

jobs:
  Set-repos:
    name: "Parse repos.json"
    runs-on: macos-latest
    outputs:
      repos: ${{ steps.generate-matrix.outputs.repos }}
      builddate: ${{ steps.generate-builddate.outputs.builddate }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v3

      - name: "Generate Matrix"
        id: generate-matrix
        run: |
          echo "repos<<EOF" >> $GITHUB_OUTPUT
          jq -s '[.[][]]' repos/repos*.json >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: "Set builddate"
        id: generate-builddate
        run: echo "builddate=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

  Build-Kernel:
    name: "🐎 Build kernel"
    runs-on: macos-latest
    needs:
      - Set-repos
    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        repos: ${{ fromJSON(needs.Set-repos.outputs.repos) }}
    env:
      WORKSPACE: ${{ github.workspace }}
      builddate: "${{ needs.Set-repos.outputs.builddate }}"
      KERNEL_NAME: ${{ matrix.repos.kernelSource.name }}
      KERNEL_REPO: ${{ matrix.repos.kernelSource.repo }}
      KERNEL_BRANCH: ${{ matrix.repos.kernelSource.branch }}
      KERNEL_DEVICE: ${{ matrix.repos.kernelSource.device }}
      DEFCONFIG_NAME: ${{ matrix.repos.kernelSource.defconfig }}
      withKernelSU: ${{ matrix.repos.withKernelSU }}
      useAnykernel: ${{ matrix.repos.AnyKernel3.use }}
      release: ${{ matrix.repos.AnyKernel3.release }}

    steps:
      - name: "Install prerequisites"
        run: |
          brew install make coreutils gnu-sed
          echo "/usr/local/opt/make/libexec/gnubin" >> $GITHUB_PATH
          echo "/usr/local/opt/gnu-sed/libexec/gnubin" >> $GITHUB_PATH
          sudo rm -rf /Library/Developer/CommandLineTools
          sudo xcode-select --install
          sudo softwareupdate --install "Command Line Tools for Xcode-14.2" --force
          sudo xcode-select --switch /Applications/Xcode_14.2.app/Contents/Developer/
          
      - name: "Setup Anykernel3"
        env:
          params: "${{ toJSON(matrix.repos.AnyKernel3) }}"
        run: |
          ANYKERNEL_REPO=$(echo $params | jq -r ".repo")
          ANYKERNEL_BRANCH=$(echo $params | jq -r ".branch")
          git clone --recursive --depth=1 -j $(nproc) --branch $ANYKERNEL_BRANCH $ANYKERNEL_REPO AnyKernel3
          echo "Setup Anykernel3 => ($ANYKERNEL_REPO)"

      - name: "Clone kernel source => (${{ env.KERNEL_REPO }})"
        run: |
          git clone --recursive --depth=1 -j $(nproc) --branch $KERNEL_BRANCH $KERNEL_REPO $KERNEL_NAME
          echo "Clone kernel source => ($KERNEL_REPO)"

      - name: "Get toolchains"
        env:
          toolchains: "${{ toJSON(matrix.repos.toolchains) }}"
        run: |
          toolchains_num="$(echo $toolchains | jq 'length')"
          echo "There is $toolchains_num defined toolchains."
          for ((i=0;i<toolchains_num;i++)); do
            toolchain_name=$(echo $toolchains | jq -r ".[$i].name")
            # Github
            toolchain_repo=$(echo $toolchains | jq -r ".[$i].repo")
            toolchain_branch=$(echo $toolchains | jq -r ".[$i].branch")
            # From archive
            toolchain_url=$(echo $toolchains | jq -r ".[$i].url")
            
            echo "Downloading ${toolchain_url}"
            if [ -z "${toolchain_url:-}" ] || [ "$toolchain_url" = "null" ];  then
              git clone --recursive --depth=1 -j $(nproc) --branch $toolchain_branch $toolchain_repo $toolchain_name
              echo "Clone $toolchain_name => ($toolchain_repo)"
            else
              wget -q "$toolchain_url"
              filename="${toolchain_url##*/}"
              mkdir -p $toolchain_name
              echo "Extracting to $toolchain_name"
              case "$filename" in
                *.zip)
                  unzip -d $toolchain_name "$filename"
                  ;;
                *.tar)
                  tar xf "$filename" -C $toolchain_name
                  ;;
                *.tar.gz)
                  tar zxf "$filename" -C $toolchain_name
                  ;;
                *.rar)
                  unrar x "$filename" $toolchain_name
                  ;;
                *)
                  echo "unknown file type: $filename"
                  ;;
              esac
            fi
            echo "Cleaning downloaded archive"
            rm $filename
            jq -r ".[$i].binPath[] | tostring" <<< "$toolchains" | while read -r bin_path; do
              echo "$WORKSPACE/$toolchain_name/$bin_path" >> $GITHUB_PATH
            done
          done

      - name: "Parsing make options and exports"
        id: generate-args
        env:
          makeOptions: "${{ toJSON(matrix.repos.makeOptions) }}"
          makeExports: "${{ toJSON(matrix.repos.makeExports) }}"
          THREAD: $(nproc --all)
        run: |
          echo "PATH Variable: $PATH"
          makeArgs="-j${{ env.THREAD }}"
          while IFS='|' read key value; do
            makeArgs="$makeArgs ${key}=${value}"
            if [ $key = "ARCH" ]; then
              echo "ARCH=$value" >> $GITHUB_OUTPUT
            fi
          done < <(jq -r 'to_entries | map(.key + "|" + (.value | tostring)) | .[]' <<< "$makeOptions")

          while IFS='|' read key value; do
            echo "${key}=${value}" >> "$GITHUB_ENV"
          done < <(jq -r 'to_entries | map(.key + "|" + (.value | tostring)) | .[]' <<< "$makeExports")

          if [ -n "${{ env.OUT_DIR }}" ]; then
            mkdir -p ${{ env.OUT_DIR }} && makeArgs="$makeArgs O=${{ env.OUT_DIR }}"
          fi
        
          echo "makeArgs=$makeArgs" >> $GITHUB_OUTPUT

      - name: "Update KernelSU"
        working-directory: ${{ env.KERNEL_NAME }}
        env:
          arch: ${{ steps.generate-args.outputs.ARCH }}
        if: ${{ env.withKernelSU == 'true' }}
        run: |
          export -p
          if [ -d "./KernelSU" ]; then
            rm -rf "./KernelSU"
          fi
          if [ -d "./drivers/kernelsu" ]; then
            rm -rf "./drivers/kernelsu"
          fi

          curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s main

          echo -e "CONFIG_KPROBES=y" >> arch/${{ env.arch }}/configs/${{ env.DEFCONFIG_NAME }}
          echo -e "CONFIG_HAVE_KPROBES=y" >> arch/${{ env.arch }}/configs/${{ env.DEFCONFIG_NAME }}
          echo -e "CONFIG_KPROBE_EVENTS=y" >> arch/${{ env.arch }}/configs/${{ env.DEFCONFIG_NAME }}

          cat arch/${{ env.arch }}/configs/${{ env.DEFCONFIG_NAME }}

      - name: "Make defconfig"
        working-directory: ${{ env.KERNEL_NAME }}
        env:
          makeArgs: ${{ steps.generate-args.outputs.makeArgs }}
          arch: ${{ steps.generate-args.outputs.ARCH }}
        run: |
          echo "PATH Variable: $PATH"
          make ${{ env.makeArgs }} ${{ env.DEFCONFIG_NAME }}

      - name: "Build kernel"
        working-directory: ${{ env.KERNEL_NAME }}
        env:
          makeArgs: ${{ steps.generate-args.outputs.makeArgs }}
        run: |
          export -p
          echo "PATH Variable: $PATH"
          echo "Options: ${{ env.makeArgs }}"
          make ${{ env.makeArgs }} prepare
          make ${{ env.makeArgs }}
